#
# Makefile for esp-link - https://github.com/jeelabs/esp-link
#
# Makefile heavily adapted to esp-link and wireless flashing by Thorsten von Eicken
# Lots of work, in particular to support windows, by brunnels
# Original from esphttpd and others...
#
# Start by setting the directories for the toolchain a few lines down
# the default target will build the firmware images
# `make flash` will flash the esp serially
# `make wiflash` will flash the esp over wifi
# `VERBOSE=1 make ...` will print debug info
# `ESP_HOSTNAME=my.esp.example.com make wiflash` is an easy way to override a variable

TOP_DIR:=$(abspath $(dir $(lastword $(MAKEFILE_LIST))))

# The Wifi station configuration can be hard-coded here, which makes esp-link come up in STA+AP
# mode trying to connect to the specified AP *only* if the flash wireless settings are empty!
# This happens on a full serial flash and avoids having to hunt for the AP...
STA_SSID ?= FASTWEB-FKDH3S
STA_PASS ?= 5P7M3ST99P

# The SOFTAP configuration can be hard-coded here, the minimum parameters to set are AP_SSID && AP_PASS
# The AP SSID has to be at least 8 characters long, same for AP PASSWORD
# The AP AUTH MODE can be set to:
#  0 = AUTH_OPEN, 
#  1 = AUTH_WEP, 
#  2 = AUTH_WPA_PSK, 
#  3 = AUTH_WPA2_PSK, 
#  4 = AUTH_WPA_WPA2_PSK
# SSID hidden default 0, ( 0 | 1 ) 
# Max connections default 4, ( 1 ~ 4 )
# Beacon interval default 100, ( 100 ~ 60000ms )
#
# AP_SSID ?=esp_link_test
# AP_PASS ?=esp_link_test
# AP_AUTH_MODE ?=4
# AP_SSID_HIDDEN ?=0
# AP_MAX_CONN ?=4
# AP_BEACON_INTERVAL ?=100

# If CHANGE_TO_STA is set to "yes" the esp-link module will switch to station mode
# once successfully connected to an access point. Else it will stay in STA+AP mode.
CHANGE_TO_STA ?= yes

# hostname or IP address for wifi flashing
ESP_HOSTNAME  ?= esp-link

# --------------- toolchain configuration ---------------

# Base directory for the compiler. Needs a / at the end.
# Typically you'll install https://github.com/pfalcon/esp-open-sdk
# IMPORTANT: use esp-open-sdk `make STANDALONE=n`: the SDK bundled with esp-open-sdk will *not* work!
XTENSA_TOOLS_ROOT ?= $(abspath ../esp-open-sdk/xtensa-lx106-elf/bin)/

# Try to find the firmware manually extracted, e.g. after downloading from Espressif's BBS,
# http://bbs.espressif.com/viewforum.php?f=46
# USING THE SDK BUNDLED WITH ESP-OPEN-SDK WILL NOT WORK!!!
SDK_BASE ?= $(SDK_DIR)

# Clean up SDK path
SDK_BASE := $(abspath $(SDK_BASE))
$(info SDK     is $(SDK_BASE))

# Path to bootloader file
BOOTFILE	?= $(SDK_BASE/bin/boot_v1.6.bin)

# Esptool.py path and port, only used for 1-time serial flashing
# Typically you'll use https://github.com/themadinventor/esptool
# Windows users use the com port i.e: ESPPORT ?= com3
ESPTOOL		?= $(abspath ../esp-open-sdk/esptool/esptool.py)
ESPPORT		?= /dev/ttyUSB0
ESPBAUD		?= 230400

# --------------- chipset configuration   ---------------

# Pick your flash size: "512KB", "1MB", or "4MB"
FLASH_SIZE ?= 4MB

# The pin assignments below are used when the settings in flash are invalid, they
# can be changed via the web interface
# GPIO pin used to reset attached microcontroller, acative low
MCU_RESET_PIN       ?= 12
# GPIO pin used with reset to reprogram MCU (ISP=in-system-programming, unused with AVRs), active low
MCU_ISP_PIN         ?= 13
# GPIO pin used for "connectivity" LED, active low
LED_CONN_PIN        ?= 0
# GPIO pin used for "serial activity" LED, active low
LED_SERIAL_PIN      ?= 14

# --------------- esp-link modules config options ---------------

SRC_PATH = src/core/
CORE_MODULES = httpd serial cmd user

# Optional Modules: mqtt rest socket webserver syslog alexa
OPTIONAL_MODULES_PATH = src/modules/
OPTIONAL_MODULES ?= espfs alexa spiffs
# spiffs espfs mqtt rest socket webserver syslog alexa
# --------------- esphttpd config options ---------------

# If GZIP_COMPRESSION is set to "yes" then the static css, js, and html files will be compressed
# with gzip before added to the espfs image and will be served with gzip Content-Encoding header.
# This could speed up the downloading of these files, but might break compatibility with older
# web browsers not supporting gzip encoding because Accept-Encoding is simply ignored.
# Enable this option if you have large static files to serve (for e.g. JQuery, Twitter bootstrap)
# If you have text based static files with different extensions what you want to serve compressed
# then you will need to add the extension to the following places:
# - Add the extension to this Makefile at the webpages.espfs target to the find command
# - Add the extension to the gzippedFileTypes array in the user/httpd.c file
#
# Adding JPG or PNG files (and any other compressed formats) is not recommended, because GZIP
# compression does not work effectively on compressed files.
GZIP_COMPRESSION ?= yes

# If COMPRESS_W_HTMLCOMPRESSOR is set to "yes" then the static css and js files will be compressed with
# htmlcompressor and yui-compressor. This option works only when GZIP_COMPRESSION is set to "yes".
# https://code.google.com/p/htmlcompressor/#For_Non-Java_Projects
# http://yui.github.io/yuicompressor/
# enabled by default.
#COMPRESS_W_NODE ?= yes
#COMPRESS_W_HTMLCOMPRESSOR ?= no
#HTML_COMPRESSOR ?= htmlcompressor-1.5.3.jar
#YUI_COMPRESSOR ?= yuicompressor-2.4.8.jar

# -------------- End of config options -------------

HTML_PATH = $(abspath ./html)/
WIFI_PATH = $(HTML_PATH)wifi/

MKESPFSIMAGE_PATH = tools/mkespfsimage
ESP_FLASH_MAX       ?= 503808  # max bin file

# --------------- esp-link version        ---------------

# Version-fu :-) This code assumes that a new maj.minor is started using a "vN.M.0" tag on master
# and that thereafter the desired patchlevel number is just the number of commits since the tag.
#
# Get the current branch name if not using travis
TRAVIS_BRANCH?=$(shell git symbolic-ref --short HEAD --quiet)
# Use git describe to get the latest version tag, commits since then, sha and dirty flag, this
# results is something like "v1.2.0-13-ab6cedf-dirty"
NO_TAG ?= "no-tag"
VERSION := $(shell (git describe --tags --match 'v*.*.*' --long --dirty || echo $(NO_TAG)) | sed -re 's/(\.0)?-/./')
# If not on master then insert the branch name
ifneq ($(TRAVIS_BRANCH),master)
ifneq ($(findstring V%,$(TRAVIS_BRANCH)),)
VERSION := $(shell echo $(VERSION) | sed -e 's/-/-$(TRAVIS_BRANCH)-/')
endif
endif
VERSION :=$(VERSION)
$(info VERSION is $(VERSION))

# Output directors to store intermediate compiled files
# relative to the project directory
BUILD_BASE	= build
LIBS_BASE   = libs
FW_BASE		= firmware

# name for the target project
TARGET		= httpd

# espressif tool to concatenate sections for OTA upload using bootloader v1.2+
APPGEN_TOOL	?= gen_appbin_py3.py

CFLAGS=

# set defines for optional modules
ifneq (,$(findstring mqtt,$(OPTIONAL_MODULES)))
	CFLAGS		+= -DMQTT
endif

ifneq (,$(findstring rest,$(OPTIONAL_MODULES)))
	CFLAGS		+= -DREST
endif

ifneq (,$(findstring syslog,$(OPTIONAL_MODULES)))
	CFLAGS		+= -DSYSLOG
endif

ifneq (,$(findstring webserver,$(OPTIONAL_MODULES)))
	CFLAGS		+= -DWEBSERVER
endif

ifneq (,$(findstring socket,$(OPTIONAL_MODULES)))
	CFLAGS		+= -DSOCKET
endif

ifneq (,$(findstring alexa,$(OPTIONAL_MODULES)))
	CFLAGS		+= -DALEXA
endif

ifneq (,$(findstring espfs,$(OPTIONAL_MODULES)))
	CFLAGS		+= -DESPFS
endif

ifneq (,$(findstring spiffs,$(OPTIONAL_MODULES)))
	CFLAGS		+= -DSPIFFS
endif

# which modules (subdirectories) of the project to include in compiling
LIBRARIES_DIR 	= libraries
MODULES		+= $(SRC_PATH) $(addprefix $(SRC_PATH),$(CORE_MODULES)) $(addprefix $(OPTIONAL_MODULES_PATH),$(OPTIONAL_MODULES)) 
MODULES		+= $(foreach sdir,$(LIBRARIES_DIR),$(wildcard $(sdir)/*))
EXTRA_INCDIR 	= include .

# libraries used in this project, mainly provided by the SDK
LIBS = c gcc hal phy pp net80211 wpa main lwip_536 crypto
ifneq (,$(findstring espfs,$(OPTIONAL_MODULES)))
	LIBS += webpages
endif

# compiler flags using during compilation of source files
CFLAGS	+= -Os -ggdb -std=c99 -Werror -Wpointer-arith -Wundef -Wall -Wl,-EL -fno-inline-functions \
	-nostdlib -mlongcalls -mtext-section-literals -ffunction-sections -fdata-sections \
	-D__ets__ -DICACHE_FLASH -Wno-address -DFIRMWARE_SIZE=$(ESP_FLASH_MAX) \
	-DMCU_RESET_PIN=$(MCU_RESET_PIN) -DMCU_ISP_PIN=$(MCU_ISP_PIN) \
	-DLED_CONN_PIN=$(LED_CONN_PIN) -DLED_SERIAL_PIN=$(LED_SERIAL_PIN) \
	-DVERSION="esp-link $(VERSION)"

CXXFLAGS += -Os -ggdb -Wpointer-arith -Wundef -Wall -Wl,-EL -fno-inline-functions \
	-nostdlib -mlongcalls -mtext-section-literals -ffunction-sections -fdata-sections \
	-D__ets__ -DICACHE_FLASH -Wno-address -DFIRMWARE_SIZE=$(ESP_FLASH_MAX) \
	-DMCU_RESET_PIN=$(MCU_RESET_PIN) -DMCU_ISP_PIN=$(MCU_ISP_PIN) \
	-DLED_CONN_PIN=$(LED_CONN_PIN) -DLED_SERIAL_PIN=$(LED_SERIAL_PIN) \
	-DVERSION="esp-link $(VERSION)"

# linker flags used to generate the main object file
LDFLAGS		= -nostdlib -Wl,--no-check-sections -u call_user_start -Wl,-static -Wl,--gc-sections

# linker script used for the above linker step
LD_SCRIPT 	:= build/eagle.esphttpd.v6.ld
LD_SCRIPT1	:= build/eagle.esphttpd1.v6.ld
LD_SCRIPT2	:= build/eagle.esphttpd2.v6.ld

# various paths from the SDK used in this project
SDK_LIBDIR	= lib
SDK_LDDIR	= ld
SDK_INCDIR	= include include/json
SDK_TOOLSDIR	= tools

# select which tools to use as compiler, librarian and linker
CC		:= $(XTENSA_TOOLS_ROOT)/bin/xtensa-lx106-elf-gcc
CXX     := $(XTENSA_TOOLS_ROOT)/bin/xtensa-lx106-elf-g++
NM      := $(XTENSA_TOOLS_ROOT)/bin/xtensa-lx106-elf-nm
AR		:= $(XTENSA_TOOLS_ROOT)/bin/xtensa-lx106-elf-ar
LD		:= $(XTENSA_TOOLS_ROOT)/bin/xtensa-lx106-elf-gcc
OBJCP		:= $(XTENSA_TOOLS_ROOT)/bin/xtensa-lx106-elf-objcopy
OBJDP		:= $(XTENSA_TOOLS_ROOT)/bin/xtensa-lx106-elf-objdump
ELF_SIZE	:= $(XTENSA_TOOLS_ROOT)/bin/xtensa-lx106-elf-size

####
SRC_DIR		:= $(MODULES)
BUILD_DIR	:= $(addprefix $(BUILD_BASE)/,$(MODULES))

SDK_LIBDIR	:= $(addprefix $(SDK_BASE)/,$(SDK_LIBDIR))
SDK_LDDIR 	:= $(addprefix $(SDK_BASE)/,$(SDK_LDDIR))
SDK_INCDIR	:= $(addprefix -I$(SDK_BASE)/,$(SDK_INCDIR))
SDK_TOOLS	:= $(addprefix $(SDK_BASE)/,$(SDK_TOOLSDIR))
#APPGEN_TOOL	:= $(addprefix $(SDK_TOOLS)/,$(APPGEN_TOOL))
APPGEN_TOOL	:= $(addprefix tools/,$(APPGEN_TOOL))

# optional local configuration file
-include local.conf

$(info TOP_DIR is $(TOP_DIR))
CUSTOM_LD = $(TOP_DIR)/libs/$(notdir $(LD_FILE))
$(info LD_FILE is $(LD_FILE))
$(info CUSTOM_LD is $(CUSTOM_LD))

SRC		:= $(foreach sdir,$(SRC_DIR),$(wildcard $(sdir)/*.c))
CXXSRC	:= $(foreach sdir,$(SRC_DIR),$(wildcard $(sdir)/*.cpp))
OBJ		:= $(patsubst %.c,$(BUILD_BASE)/%.o,$(SRC)) $(patsubst %.cpp,$(BUILD_BASE)/%.o,$(CXXSRC)) 
LIBS		:= $(addprefix -l,$(LIBS))
APP_AR		:= $(addprefix $(BUILD_BASE)/,$(TARGET)_app.a)
ESPFS_AR		:= $(addprefix $(LIBS_BASE)/,libwebpages.a)
USER_OUT 	:= $(addprefix $(BUILD_BASE)/,$(BIN_NAME).out)

INCDIR		:= -Isrc/include -Isrc/modules 
EXTRA_INCDIR	:= $(addprefix -I,$(EXTRA_INCDIR))
MODULE_INCDIR	:= $(addsuffix /include,$(INCDIR))

NODE_APP = ./f2hgz.js
DATA_DIR	= $(TOP_DIR)/data

V ?= $(VERBOSE)
ifeq ("$(V)","1")
Q :=
vecho := @true
else
Q := @
vecho := @echo
endif

ifneq ($(strip $(STA_SSID)),)
CFLAGS		+= -DSTA_SSID="$(STA_SSID)"
endif

ifneq ($(strip $(STA_PASS)),)
CFLAGS		+= -DSTA_PASS="$(STA_PASS)"
endif

ifneq ($(strip $(AP_SSID)),)
CFLAGS		+= -DAP_SSID="$(AP_SSID)"
endif

ifneq ($(strip $(AP_PASS)),)
CFLAGS		+= -DAP_PASS="$(AP_PASS)"
endif

ifneq ($(strip $(AP_AUTH_MODE)),)
CFLAGS		+= -DAP_AUTH_MODE="$(AP_AUTH_MODE)"
endif

ifneq ($(strip $(AP_SSID_HIDDEN)),)
CFLAGS		+= -DAP_SSID_HIDDEN="$(AP_SSID_HIDDEN)"
endif

ifneq ($(strip $(AP_MAX_CONN)),)
CFLAGS		+= -DAP_MAX_CONN="$(AP_MAX_CONN)"
endif

ifneq ($(strip $(AP_BEACON_INTERVAL)),)
CFLAGS		+= -DAP_BEACON_INTERVAL="$(AP_BEACON_INTERVAL)"
endif

ifeq ("$(GZIP_COMPRESSION)","yes")
CFLAGS		+= -DGZIP_COMPRESSION
endif

ifeq ("$(CHANGE_TO_STA)","yes")
CFLAGS		+= -DCHANGE_TO_STA
endif

vpath %.c $(SRC_DIR)
vpath %.cpp $(SRC_DIR)

define compile-objects
$1/%.o: %.c
	$(vecho) "CC $$<"
	$(Q)$(CC) $(INCDIR) $(MODULE_INCDIR) $(EXTRA_INCDIR) $(SDK_INCDIR) $(CFLAGS)  -c $$< -o $$@
$1/%.o: %.cpp
	$(vecho) "CC $$<"
	$(Q)$(CXX) $(INCDIR) $(MODULE_INCDIR) $(EXTRA_INCDIR) $(SDK_INCDIR) $(CXXFLAGS)  -c $$< -o $$@
endef

.PHONY: all checkdirs clean webpages.espfs wiflash

all: checkdirs $(FW_BASE)/$(BIN_NAME).bin

$(CUSTOM_LD): $(LD_FILE) $(SDK_LDDIR)/eagle.rom.addr.v6.ld
	$(Q) python3 $(TOP_DIR)/tools/makeld.py $(boot) $(mode) $(freqdiv) $(size_map) $(app) $(SDK_DIR) $(TOP_DIR)/libs

$(USER_OUT): $(APP_AR) $(ESPFS_AR) $(CUSTOM_LD)
	$(vecho) "$(XTENSA_TOOLS_ROOT) LD -L$(SDK_LIBDIR) -L$(LIBS_BASE) -T$(CUSTOM_LD) $(LDFLAGS) -Wl,--start-group $(LIBS) $(APP_AR) -Wl,--end-group -o $@"
	$(Q) $(LD) -L$(SDK_LIBDIR) -L$(LIBS_BASE) -T$(CUSTOM_LD) $(LDFLAGS) -Wl,--start-group $(LIBS) $(APP_AR) -Wl,--end-group -o $@
	@echo Dump  : $(OBJDP) -x $(USER_OUT)
	@echo Disass: $(OBJDP) -d -l -x $(USER_OUT)
#	$(Q) $(OBJDP) -x $(TARGET_OUT) | egrep espfs_img

$(FW_BASE):
	$(vecho) "FW $@"
	$(Q) mkdir -p $@

$(FW_BASE)/$(BIN_NAME).bin: $(USER_OUT) $(FW_BASE)
	$(Q) $(ELF_SIZE) -A $(USER_OUT) |grep -v " 0$$" |grep .
	$(Q) python3 $(APPGEN_TOOL) $< 2 $(mode) $(freqdiv) $(size_map) $(app)
	$(Q) rm -f eagle.app.v6.*.bin
	$(Q) mv eagle.app.flash.bin $@
	@echo "    user1.bin uses $$(stat -c '%s' $@) bytes of" $(ESP_FLASH_MAX) "available"
	$(Q) if [ $$(stat -c '%s' $@) -gt $$(( $(ESP_FLASH_MAX) )) ]; then echo "$@ too big!"; false; fi

$(APP_AR): $(OBJ)
	$(vecho) "AR $@"
	$(Q) $(AR) cru $@ $^

$(ESPFS_AR): 
	make -C html
#	$(vecho) "AR $@"
#	$(Q) $(AR) cru $@ $^

checkdirs: $(BUILD_DIR)

$(BUILD_DIR):
	$(Q) mkdir -p $@

wiflash: all
	./wiflash $(ESP_HOSTNAME) $(FW_BASE)/$(BIN_NAME).bin

baseflash: all
	$(Q) $(ESPTOOL) --port $(ESPPORT) --baud $(ESPBAUD) write_flash 0x01000 $(FW_BASE)/$(BIN_NAME).bin

flash: all
	$(Q) $(ESPTOOL) --port $(ESPPORT) --baud $(ESPBAUD) write_flash -fs $(ET_FS) -ff $(ET_FF) \
	  0x00000 "$(SDK_BASE)/bin/boot_v1.5.bin" 0x01000 $(FW_BASE)/$(BIN_NAME).bin \
	  $(ET_BLANK) $(SDK_BASE)/bin/blank.bin

#tools/$(HTML_COMPRESSOR):
#	$(Q) echo "The jar files in the tools dir are missing, they should be in the source repo"
#	$(Q) echo "The following commands can be used to fetch them, but the URLs have changed..."
#	$(Q) echo mkdir -p tools
#	$(Q) echo "cd tools; wget --no-check-certificate https://github.com/yui/yuicompressor/releases/download/v2.4.8/$(YUI_COMPRESSOR) -O $(YUI_COMPRESSOR)"
#	$(Q) echo "cd tools; wget --no-check-certificate https://htmlcompressor.googlecode.com/files/$(HTML_COMPRESSOR) -O $(HTML_COMPRESSOR)"
#
#ifneq (,$(findstring espfs,$(OPTIONAL_MODULES)))
#ifeq ("$(COMPRESS_W_HTMLCOMPRESSOR)","yes")
#$(BUILD_BASE)/espfs_img.o: tools/$(HTML_COMPRESSOR)
#endif
#
#$(BUILD_BASE)/espfs_img.o: $(HTML_PATH)/ $(HTML_PATH)/wifi/ $(MKESPFSIMAGE_PATH)/mkespfsimage
#	$(Q) rm -rf $(DATA_DIR); mkdir $(DATA_DIR); mkdir $(DATA_DIR)/wifi;
#	$(Q) cp -r $(HTML_PATH)/*.ico $(DATA_DIR);
#	$(Q) cp -r $(HTML_PATH)/*.xml $(DATA_DIR);
#	$(Q) cp -r $(HTML_PATH)/wifi/*.png $(DATA_DIR)/wifi;
#	$(Q) node $(NODE_APP) "$(HTML_PATH)" "$(DATA_DIR)";
#ifeq (,$(findstring mqtt,$(OPTIONAL_MODULES)))
#	$(Q) rm -rf data/mqtt.html
#	$(Q) rm -rf data/mqtt.js
#endif
#ifeq (,$(findstring webserver,$(OPTIONAL_MODULES)))
#	$(Q) rm -rf data/webserver.html
#	$(Q) rm -rf data/userpage.js
#endif
#ifeq (,$(findstring alexa,$(OPTIONAL_MODULES)))
#	$(Q) rm -rf data/alexa.*
#	$(Q) rm -rf data/*.xml
#endif
#	$(Q) cd data; find . \! -name \*- | ../$(MKESPFSIMAGE_PATH)/mkespfsimage > ../build/espfs.img; cd ..;
#	$(Q) ls -sl build/espfs.img
#	$(Q) cd build; $(OBJCP) -I binary -O elf32-xtensa-le -B xtensa --rename-section .data=.espfs \
#	  espfs.img espfs_img.o; cd ..
#endif

# edit the loader script to add the espfs section to the end of irom with a 4 byte alignment.
# we also adjust the sizes of the segments 'cause we need more irom0
build/eagle.esphttpd1.v6.ld: $(SDK_LDDIR)/eagle.app.v6.new.1024.app1.ld
	$(Q) sed -e '/\.irom\.text/{' -e 'a . = ALIGN (4);' -e 'a *(.espfs)' -e '}'  \
		-e '/^  irom0_0_seg/ s/6B000/7C000/' \
		$(SDK_LDDIR)/eagle.app.v6.new.1024.app1.ld >$@
build/eagle.esphttpd2.v6.ld: $(SDK_LDDIR)/eagle.app.v6.new.1024.app2.ld
	$(Q) sed -e '/\.irom\.text/{' -e 'a . = ALIGN (4);' -e 'a *(.espfs)' -e '}'  \
		-e '/^  irom0_0_seg/ s/6B000/7C000/' \
		$(SDK_LDDIR)/eagle.app.v6.new.1024.app2.ld >$@

#ifneq (,$(findstring espfs,$(OPTIONAL_MODULES)))
#$(MKESPFSIMAGE_PATH)/mkespfsimage: $(MKESPFSIMAGE_PATH)/
#	$(Q) $(MAKE) -C $(MKESPFSIMAGE_PATH) GZIP_COMPRESSION="$(GZIP_COMPRESSION)"
#endif

release: all
	$(Q) rm -rf release; mkdir -p release/esp-link-$(VERSION)
	$(Q) egrep -a 'esp-link [a-z0-9.]+ - 201' $(FW_BASE)/$(BIN_NAME).bin | cut -b 1-80
	$(Q) cp $(FW_BASE)/$(BIN_NAME).bin $(SDK_BASE)/bin/blank.bin \
	       "$(SDK_BASE)/bin/boot_v1.7.bin" "$(SDK_BASE)/bin/esp_init_data_default.bin" \
	       wiflash avrflash megaflash release/esp-link-$(VERSION)
	$(Q) tar zcf esp-link-$(VERSION).tgz -C release esp-link-$(VERSION)
	$(Q) echo "Release file: esp-link-$(VERSION).tgz"
	$(Q) rm -rf release

docker:
	$(Q) docker build -t jeelabs/esp-link .
clean:
	$(Q) rm -f $(APP_AR)
	$(Q) rm -f $(ESPFS_AR)
	$(Q) rm -f $(TARGET_OUT)
	$(Q) find $(BUILD_BASE) -type f | xargs rm -f
	$(Q) make -C $(MKESPFSIMAGE_PATH)/ clean
	$(Q) rm -rf $(FW_BASE)
#	$(Q) rm -f webpages.espfs
#ifeq ("$(COMPRESS_W_HTMLCOMPRESSOR)","yes")
#	$(Q) rm -rf data
#endif

$(foreach bdir,$(BUILD_DIR),$(eval $(call compile-objects,$(bdir))))

depend:
	makedepend -p${BUILD_BASE}/ -Y -- $(INCDIR) $(MODULE_INCDIR) $(EXTRA_INCDIR) $(SDK_INCDIR) -I${XTENSA_TOOLS_ROOT}../xtensa-lx106-elf/include -I${XTENSA_TOOLS_ROOT}../lib/gcc/xtensa-lx106-elf/4.8.2/include -- */*.c

# Rebuild version at least at every Makefile change

${BUILD_BASE}/esp-link/main.o: Makefile

# DO NOT DELETE

